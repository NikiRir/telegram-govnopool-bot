/**
 * –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω –∏ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
 */
const TATARSTAN_CITIES = [
    '–ö–∞–∑–∞–Ω—å', '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã', '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫', '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫', '–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
    '–ë—É–≥—É–ª—å–º–∞', '–ï–ª–∞–±—É–≥–∞', '–õ–µ–Ω–∏–Ω–æ–≥–æ—Ä—Å–∫', '–ß–∏—Å—Ç–æ–ø–æ–ª—å', '–ê–∑–Ω–∞–∫–∞–µ–≤–æ',
    '–ë—É–∏–Ω—Å–∫', '–ú–∞–º–∞–¥—ã—à', '–ú–µ–Ω–¥–µ–ª–µ–µ–≤—Å–∫', '–¢–µ—Ç—é—à–∏', '–ê–≥—Ä—ã–∑',
    '–ê—Ä—Å–∫', '–ë–æ–ª–≥–∞—Ä', '–í–µ—Ä—Ö–Ω–∏–π –£—Å–ª–æ–Ω', '–í—ã—Å–æ–∫–∞—è –ì–æ—Ä–∞', '–ó–∞–∏–Ω—Å–∫',
    '–ò–Ω–Ω–æ–ø–æ–ª–∏—Å', '–ö—É–∫–º–æ—Ä', '–õ–∞–∏—à–µ–≤–æ', '–ú—É—Å–ª—é–º–æ–≤–æ', '–ù—É—Ä–ª–∞—Ç',
    '–ü–µ—Å—Ç—Ä–µ—Ü—ã', '–†—ã–±–Ω–∞—è –°–ª–æ–±–æ–¥–∞', '–°–ø–∞—Å—Å–∫', '–Æ—Ç–∞–∑—ã'
];

const CITY_CORRECTIONS = {
    '—á—ã–ª–Ω—ã': '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã',
    '—á–µ–ª–Ω—ã': '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã',
    '–Ω–∞–±.—á–µ–ª–Ω—ã': '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã',
    '–Ω–∞–± —á–µ–ª–Ω—ã': '–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã',
    '–º–æ—Å–ª–∏–º': '–ú—É—Å–ª—é–º–æ–≤–æ',
    '–º–æ—Å–ª–∏–º–Ω—ç–Ω': '–ú—É—Å–ª—é–º–æ–≤–æ',
    '–∫–∞–∑–∞–Ω': '–ö–∞–∑–∞–Ω—å',
    '–µ–ª–∞–±—É–≥–∞': '–ï–ª–∞–±—É–≥–∞',
    '–µ–ª–∞–±—É–∂–∫–∞': '–ï–ª–∞–±—É–≥–∞',
    '–∞–ª–º–µ—Ç': '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫',
    '–∞–ª—å–º–µ—Ç': '–ê–ª—å–º–µ—Ç—å–µ–≤—Å–∫',
    '–Ω–∫–∞–º—Å–∫': '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫',
    '–Ω–∏–∂–Ω–µ–∫–∞–º—Å–∫': '–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫',
    '–∑–µ–ª–µ–Ω–∫–∞': '–ó–µ–ª–µ–Ω–æ–¥–æ–ª—å—Å–∫',
    '–±—É–≥—É–ª—å': '–ë—É–≥—É–ª—å–º–∞',
    '—á–∏—Å—Ç–æ–ø–æ–ª—å': '–ß–∏—Å—Ç–æ–ø–æ–ª—å',
    '–ª–µ–Ω–∏–Ω–æ–≥–æ—Ä—Å–∫': '–õ–µ–Ω–∏–Ω–æ–≥–æ—Ä—Å–∫'
};

/**
 * –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
 */
const CONTACT_CORRECTIONS = {
    '–≤–∞—Ç—Å–∞–ø': 'WhatsApp üì±',
    '–≤–∞—Ü–∞–ø': 'WhatsApp üì±',
    '–≤–∞—Ç—Ü–∞–ø': 'WhatsApp üì±',
    'whatsapp': 'WhatsApp üì±',
    'watts': 'WhatsApp üì±',
    '–≤–æ—Ç—Å–∞–ø': 'WhatsApp üì±',
    'vatsap': 'WhatsApp üì±',
    '–≤–∫': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ üìò',
    'vk': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ üìò',
    'vkontakte': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ üìò',
    '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ üìò',
    '–æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ üü†',
    '–æ–∫': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ üü†',
    'ok': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ üü†',
    '–æ–¥–Ω': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ üü†',
    '–∏–Ω—Å—Ç–∞': 'Instagram üì∑',
    '–∏–Ω—Å—Ç–∞–≥—Ä–∞–º': 'Instagram üì∑',
    'instagram': 'Instagram üì∑',
    'inst': 'Instagram üì∑',
    '—Ç–µ–ª–µ–≥–∞': 'Telegram üì®',
    '—Ç–µ–ª–µ–≥—Ä–∞–º': 'Telegram üì®',
    'telegram': 'Telegram üì®',
    '—Ç–≥': 'Telegram üì®'
};

/**
 * –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–∞
 */
function correctCity(input) {
    const normalized = input.toLowerCase().trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é
    if (CITY_CORRECTIONS[normalized]) {
        return {
            corrected: true,
            city: CITY_CORRECTIONS[normalized],
            original: input
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const exactMatch = TATARSTAN_CITIES.find(city => 
        city.toLowerCase() === normalized
    );
    
    if (exactMatch) {
        return {
            corrected: false,
            city: exactMatch,
            original: input
        };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const partialMatch = TATARSTAN_CITIES.find(city => 
        city.toLowerCase().includes(normalized) || 
        normalized.includes(city.toLowerCase())
    );
    
    if (partialMatch) {
        return {
            corrected: true,
            city: partialMatch,
            original: input
        };
    }
    
    return {
        corrected: false,
        city: null,
        original: input
    };
}

/**
 * –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
 */
function correctContact(input) {
    let corrected = input;
    let wasCorrected = false;
    
    // –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
    for (const [key, value] of Object.entries(CONTACT_CORRECTIONS)) {
        const regex = new RegExp(`\\b${key}\\b`, 'gi');
        if (regex.test(corrected)) {
            corrected = corrected.replace(regex, value);
            wasCorrected = true;
        }
    }
    
    return {
        corrected: wasCorrected,
        contact: corrected,
        original: input
    };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
 */
function validateTime(timeStr) {
    const timePattern = /(\d{1,2}):(\d{2})/;
    const match = timeStr.match(timePattern);
    
    if (!match) {
        return {
            isValid: false,
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30)'
        };
    }
    
    const hours = parseInt(match[1]);
    const minutes = parseInt(match[2]);
    
    if (hours < 0 || hours > 23) {
        return {
            isValid: false,
            error: '–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23'
        };
    }
    
    if (minutes < 0 || minutes > 59) {
        return {
            isValid: false,
            error: '–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 59'
        };
    }
    
    return {
        isValid: true,
        hours: hours,
        minutes: minutes
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
 */
function formatDateTime(input) {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);
    
    const todayStr = today.toLocaleDateString('ru-RU');
    const tomorrowStr = tomorrow.toLocaleDateString('ru-RU');
    
    const normalized = input.toLowerCase().trim();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    const timePattern = /(\d{1,2}):(\d{2})/;
    const timeMatch = input.match(timePattern);
    
    if (!timeMatch) {
        return {
            isValid: false,
            error: '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú'
        };
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    const timeValidation = validateTime(timeMatch[0]);
    if (!timeValidation.isValid) {
        return timeValidation;
    }
    
    const timeStr = `${String(timeValidation.hours).padStart(2, '0')}:${String(timeValidation.minutes).padStart(2, '0')}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if (normalized.includes('—Å–µ–≥–æ–¥–Ω—è')) {
        return {
            isValid: true,
            formatted: `${todayStr} –≤ ${timeStr}`
        };
    } else if (normalized.includes('–∑–∞–≤—Ç—Ä–∞')) {
        return {
            isValid: true,
            formatted: `${tomorrowStr} –≤ ${timeStr}`
        };
    } else {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        const withoutTime = input.replace(timePattern, '').trim();
        return {
            isValid: true,
            formatted: `${withoutTime} –≤ ${timeStr}`.trim()
        };
    }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function validateContact(contact) {
    if (!contact || contact.trim().length < 2) {
        return {
            isValid: false,
            error: '–ö–æ–Ω—Ç–∞–∫—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π'
        };
    }
    
    const cleanContact = contact.trim();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    const phonePattern = /^[\+]?[78]?[\s\-\(\)]?[0-9\s\-\(\)]{7,15}$/;
    if (phonePattern.test(cleanContact.replace(/\s/g, ''))) {
        return { isValid: true };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ username Telegram
    if (cleanContact.startsWith('@') && cleanContact.length > 3) {
        return { isValid: true };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É Telegram
    if (cleanContact.includes('t.me/') || cleanContact.includes('telegram.me/')) {
        return { isValid: true };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    if (cleanContact.includes('vk.com/') || cleanContact.includes('ok.ru/') || cleanContact.includes('wa.me/')) {
        return { isValid: true };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç (–∏–º—è)
    if (cleanContact.length >= 2 && /^[–∞-—è—ëa-z\s0-9üì±üìòüü†üì∑üì®\+\-\(\)]+$/i.test(cleanContact)) {
        return { isValid: true };
    }
    
    return {
        isValid: false,
        error: '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, @username, —Å—Å—ã–ª–∫—É –∏–ª–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä'
    };
}

module.exports = {
    correctCity,
    correctContact,
    validateTime,
    formatDateTime,
    validateContact,
    TATARSTAN_CITIES
};
